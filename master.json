{
 "meta": {
  "generator": "0.11.1",
  "format": 22,
  "date": 1656890116884
 },
 "custom": {
  "general": {
   "name": "General",
   "files": {
    "welcome": {
     "name": "Welcome",
     "type": "md",
     "content": "## Welcome!\n\n<strong>Welcome, this is '@djs-modules/moderation' module!</strong> <br />\n<strong>\"@djs-modules/moderation\" is a module that allows you to make a moderation system in your Discord bot.</strong>\n\n## Features\n\n<span><strong>[üîë] Built in TypeScript</strong></span> <br />\n<span><strong>[‚öô] 100% Promise-based</strong></span> <br />\n<span><strong>[üôÇ] TypeScript Support</strong></span> <br />\n<span><strong>[üëç] Discord.JS v13</strong></span> <br />\n<span><strong>[‚ùó] Remute if member rejoins server</strong></span>\n\n## Requirements\n\n<span><strong>[1] [NodeJS v16 or Above](https://nodejs.org/)</strong></span> <br />\n<span><strong>[2] [Discord.JS](https://npmjs.com/package/discord.js/)</strong></span> <br />\n\n## Quick Example\n\n```js\nconst { Client, Intents } = require(\"discord.js\");\nconst { Moderation } = require(\"@djs-modules/moderation\");\n\nconst client = new Client({\n  intents: [\n    \"GUILDS\",\n    \"GUILD_MESSAGES\",\n    \"GUILD_PRESENCES\",\n    \"GUILD_MEMBERS\",\n    \"GUILD_BANS\",\n  ],\n});\n\nconst moderation = new Moderation(client, {\n  dbPath: \"./\",\n  locale: \"en-US\",\n  defaultSystems: {\n    autoRole: false,\n    antiSpam: false,\n    antiInvite: false,\n    antiJoin: false,\n    antiLink: false,\n    blacklist: false,\n    ghostPing: false,\n    logSystem: false,\n  },\n});\n```\n\n## This module uses\n\n<span><strong>[1] [Discord.JS](https://npmjs.com/package/discord.js/)</strong></span> <br />\n<span><strong>[2] [colors](https://npmjs.com/package/colors/)</strong></span> <br />\n<span><strong>[3] [ms](https://npmjs.com/package/ms/)</strong></span> <br />\n<span><strong>[4] [node-fetch](https://npmjs.com/package/node-fetch/)</strong></span> <br />\n<span><strong>[5] [enmap (database)](https://npmjs.com/package/enmap/)</strong></span> <br />\n\n## Links\n\n<span><strong>[1] [Documentation (soon)](https://djs-modules.js.org/)</strong></span> <br />\n<span><strong>[2] [Module Author](https://npmjs.com/~djs-modules/)</strong></span> <br />\n<span><strong>[3] [Support Server](https://discord.gg/zsTgXs24k2/)</strong></span>\n",
     "path": "pages/general/welcome.md"
    }
   }
  }
 },
 "classes": [
  {
   "name": "AntiSpam",
   "description": "Anti-Spam System",
   "construct": {
    "name": "AntiSpam",
    "params": [
     {
      "name": "client",
      "description": "Discord.JS Client",
      "type": [
       [
        [
         "Client"
        ]
       ]
      ]
     },
     {
      "name": "options",
      "description": "Module Options",
      "type": [
       [
        [
         "Options"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "client",
     "description": "Discord Client",
     "type": [
      [
       [
        "Client"
       ]
      ]
     ],
     "meta": {
      "line": 41,
      "file": "AntiSpam.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "options",
     "description": "Module Options",
     "type": [
      [
       [
        "Options"
       ]
      ]
     ],
     "meta": {
      "line": 47,
      "file": "AntiSpam.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "systems",
     "description": "Systems Manager",
     "type": [
      [
       [
        "SystemsManager"
       ]
      ]
     ],
     "meta": {
      "line": 53,
      "file": "AntiSpam.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "mutes",
     "description": "Mute Manager",
     "type": [
      [
       [
        "MuteManager"
       ]
      ]
     ],
     "meta": {
      "line": 59,
      "file": "AntiSpam.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "utils",
     "description": "Module Utils",
     "type": [
      [
       [
        "Utils"
       ]
      ]
     ],
     "meta": {
      "line": 65,
      "file": "AntiSpam.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "logger",
     "description": "Module Logger",
     "type": [
      [
       [
        "Logger"
       ]
      ]
     ],
     "meta": {
      "line": 71,
      "file": "AntiSpam.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "usersMap",
     "description": "Users Map",
     "type": [
      [
       [
        "Map",
        "<"
       ],
       [
        "string",
        ", "
       ],
       [
        "userMap",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 77,
      "file": "AntiSpam.ts",
      "path": "src/classes"
     }
    }
   ],
   "methods": [
    {
     "name": "handle",
     "description": "Method that handles Anti-Spam System.",
     "params": [
      {
       "name": "message",
       "description": "Message",
       "type": [
        [
         [
          "Message"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "ReturnObject",
        "|"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 84,
      "file": "AntiSpam.ts",
      "path": "src/classes"
     }
    }
   ],
   "meta": {
    "line": 26,
    "file": "AntiSpam.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "AutoRole",
   "description": "Auto-Role System",
   "construct": {
    "name": "AutoRole",
    "params": [
     {
      "name": "client",
      "description": "Discord.JS Client",
      "type": [
       [
        [
         "Client"
        ]
       ]
      ]
     },
     {
      "name": "options",
      "description": "Module Options",
      "type": [
       [
        [
         "Options"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "client",
     "description": "Discord Client",
     "type": [
      [
       [
        "Client"
       ]
      ]
     ],
     "meta": {
      "line": 31,
      "file": "AutoRole.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "options",
     "description": "Module Options",
     "type": [
      [
       [
        "Options"
       ]
      ]
     ],
     "meta": {
      "line": 37,
      "file": "AutoRole.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "systems",
     "description": "Systems Manager",
     "type": [
      [
       [
        "SystemsManager"
       ]
      ]
     ],
     "meta": {
      "line": 43,
      "file": "AutoRole.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "utils",
     "description": "Module Utils",
     "type": [
      [
       [
        "Utils"
       ]
      ]
     ],
     "meta": {
      "line": 49,
      "file": "AutoRole.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "logger",
     "description": "Module Logger",
     "type": [
      [
       [
        "Logger"
       ]
      ]
     ],
     "meta": {
      "line": 55,
      "file": "AutoRole.ts",
      "path": "src/classes"
     }
    }
   ],
   "methods": [
    {
     "name": "get",
     "description": "Method that gets Guild Auto-Role",
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "ReturnObject",
        "|"
       ],
       [
        "Role",
        "|"
       ],
       [
        "null",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 62,
      "file": "AutoRole.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "set",
     "description": "Method that sets Guild Auto-Role",
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      },
      {
       "name": "role",
       "description": "Discord Role",
       "type": [
        [
         [
          "Role"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "ReturnObject",
        "|"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 92,
      "file": "AutoRole.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "delete",
     "description": "Method that removes Guild Auto-Role",
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "ReturnObject",
        "|"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 125,
      "file": "AutoRole.ts",
      "path": "src/classes"
     }
    }
   ],
   "meta": {
    "line": 16,
    "file": "AutoRole.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "DBManager",
   "description": "Class that controls Database",
   "construct": {
    "name": "DBManager",
    "params": [
     {
      "name": "client",
      "description": "Discord.JS Client",
      "type": [
       [
        [
         "Client"
        ]
       ]
      ]
     },
     {
      "name": "options",
      "description": "Module Options",
      "type": [
       [
        [
         "Options"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "client",
     "description": "Discord Client",
     "type": [
      [
       [
        "Client"
       ]
      ]
     ],
     "meta": {
      "line": 28,
      "file": "DBManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "options",
     "description": "Module Options",
     "type": [
      [
       [
        "Options"
       ]
      ]
     ],
     "meta": {
      "line": 34,
      "file": "DBManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "logger",
     "description": "Module Logger",
     "type": [
      [
       [
        "Logger"
       ]
      ]
     ],
     "meta": {
      "line": 40,
      "file": "DBManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "database",
     "description": "Database",
     "type": [
      [
       [
        "Enmap",
        "<"
       ],
       [
        "string",
        ", "
       ],
       [
        "GuildData",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 46,
      "file": "DBManager.ts",
      "path": "src/classes"
     }
    }
   ],
   "methods": [
    {
     "name": "set",
     "description": "Method that Changes Guild Data from Database",
     "params": [
      {
       "name": "id",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "value",
       "description": "Value to Set",
       "type": [
        [
         [
          "GuildData"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 57,
      "file": "DBManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "setProp",
     "description": "Method that Changes Property Value from Database",
     "params": [
      {
       "name": "id",
       "description": "Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "key",
       "description": "Property Name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "value",
       "description": "Value to Set",
       "type": [
        [
         [
          "any"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 73,
      "file": "DBManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "push",
     "description": "Method that Pushing Data to Something from Database",
     "params": [
      {
       "name": "id",
       "description": "Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "data",
       "description": "Data to Push",
       "type": [
        [
         [
          "any"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 96,
      "file": "DBManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "get",
     "description": "Method that Returns Value from Specified Key in Database",
     "params": [
      {
       "name": "id",
       "description": "Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "key",
       "description": "Key to Get",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "any",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 112,
      "file": "DBManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "fetch",
     "description": "Method that Returns Data from Database",
     "params": [
      {
       "name": "id",
       "description": "Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "GuildData",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 129,
      "file": "DBManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "remove",
     "description": "Method that Removes Object from Array in Database",
     "params": [
      {
       "name": "id",
       "description": "Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "key",
       "description": "Name of Array in Database",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "second",
       "description": "Property for Filter",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "value",
       "description": "Value for Filter",
       "type": [
        [
         [
          "any"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "any",
        "|"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 144,
      "file": "DBManager.ts",
      "path": "src/classes"
     }
    }
   ],
   "meta": {
    "line": 14,
    "file": "DBManager.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "ImmunityUsers",
   "description": "Immunity Users Class",
   "props": [
    {
     "name": "client",
     "description": "Discord Client",
     "type": [
      [
       [
        "Client"
       ]
      ]
     ],
     "meta": {
      "line": 22,
      "file": "ImmunityUsers.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "options",
     "description": "Module Options",
     "type": [
      [
       [
        "Options"
       ]
      ]
     ],
     "meta": {
      "line": 28,
      "file": "ImmunityUsers.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "utils",
     "description": "Module Utils",
     "type": [
      [
       [
        "Utils"
       ]
      ]
     ],
     "meta": {
      "line": 34,
      "file": "ImmunityUsers.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "logger",
     "description": "Module Logger",
     "type": [
      [
       [
        "Logger"
       ]
      ]
     ],
     "meta": {
      "line": 40,
      "file": "ImmunityUsers.ts",
      "path": "src/classes"
     }
    }
   ],
   "methods": [
    {
     "name": "add",
     "description": "Method that adds Member to Immunity List.",
     "params": [
      {
       "name": "member",
       "description": "Discord Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 47,
      "file": "ImmunityUsers.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "delete",
     "description": "Method that removes Member to Immunity List.",
     "params": [
      {
       "name": "member",
       "description": "Discord Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 77,
      "file": "ImmunityUsers.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "getAll",
     "description": "Method that returns an Array of Immunity Users.",
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "Array",
        "<"
       ],
       [
        "ImmunityUsersData",
        ">>"
       ]
      ]
     ],
     "meta": {
      "line": 102,
      "file": "ImmunityUsers.ts",
      "path": "src/classes"
     }
    }
   ],
   "meta": {
    "line": 14,
    "file": "ImmunityUsers.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "Logger",
   "description": "Logger Class",
   "methods": [
    {
     "name": "log",
     "description": "Logging Something",
     "params": [
      {
       "name": "message",
       "description": "Message to Log",
       "type": [
        [
         [
          "String"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "void"
       ]
      ]
     ],
     "meta": {
      "line": 36,
      "file": "Logger.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "warn",
     "description": "Logging Something",
     "params": [
      {
       "name": "message",
       "description": "Message to Log",
       "type": [
        [
         [
          "String"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "void"
       ]
      ]
     ],
     "meta": {
      "line": 36,
      "file": "Logger.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "error",
     "description": "Logging Something",
     "params": [
      {
       "name": "message",
       "description": "Message to Log",
       "type": [
        [
         [
          "String"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "void"
       ]
      ]
     ],
     "meta": {
      "line": 36,
      "file": "Logger.ts",
      "path": "src/classes"
     }
    }
   ],
   "meta": {
    "line": 3,
    "file": "Logger.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "Moderation",
   "description": "Class that enables Moderation System",
   "extends": [
    [
     [
      "TypedEmitter",
      "<"
     ],
     [
      "Events",
      ">"
     ]
    ]
   ],
   "construct": {
    "name": "Moderation",
    "params": [
     {
      "name": "client",
      "description": "Discord.JS Client",
      "type": [
       [
        [
         "Client"
        ]
       ]
      ]
     },
     {
      "name": "options",
      "description": "Module Options",
      "type": [
       [
        [
         "Options"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "client",
     "description": "Discord Client",
     "type": [
      [
       [
        "Client"
       ]
      ]
     ],
     "meta": {
      "line": 48,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "options",
     "description": "Module Options",
     "type": [
      [
       [
        "Options"
       ]
      ]
     ],
     "meta": {
      "line": 54,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "mutes",
     "description": "MuteManager Class",
     "type": [
      [
       [
        "MuteManager"
       ]
      ]
     ],
     "meta": {
      "line": 60,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "warns",
     "description": "WarnManager Class",
     "type": [
      [
       [
        "WarnManager"
       ]
      ]
     ],
     "meta": {
      "line": 66,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "utils",
     "description": "Module Utils",
     "type": [
      [
       [
        "Utils"
       ]
      ]
     ],
     "meta": {
      "line": 72,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "autoRole",
     "description": "Auto-Role System",
     "type": [
      [
       [
        "AutoRole"
       ]
      ]
     ],
     "meta": {
      "line": 78,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "antiSpam",
     "description": "Anti-Spam System",
     "type": [
      [
       [
        "AntiSpam"
       ]
      ]
     ],
     "meta": {
      "line": 84,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "systems",
     "description": "Systems Manager",
     "type": [
      [
       [
        "SystemsManager"
       ]
      ]
     ],
     "meta": {
      "line": 90,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "guildSystems",
     "description": "Module Systems",
     "type": [
      [
       [
        "SystemsManager"
       ]
      ]
     ],
     "meta": {
      "line": 96,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    }
   ],
   "methods": [
    {
     "name": "_init",
     "access": "private",
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 105,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "lockdown",
     "description": "Method that locks channel.",
     "params": [
      {
       "name": "channel",
       "description": "Text Channel",
       "type": [
        [
         [
          "TextChannel"
         ]
        ]
       ]
      },
      {
       "name": "reason",
       "description": "Reason for lock",
       "optional": true,
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 121,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "unlock",
     "description": "Method that unlocks channel.",
     "params": [
      {
       "name": "channel",
       "description": "Text Channel",
       "type": [
        [
         [
          "TextChannel"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 163,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    }
   ],
   "events": [
    {
     "name": "muteCreate",
     "params": [
      {
       "name": "id",
       "description": "ID of the Mute",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "type",
       "description": "Type of the Mute",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "guildID",
       "description": "ID of the Guild",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "memberID",
       "description": "ID of the Muted Member",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "moderatorID",
       "description": "ID of the Moderator",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "channelID",
       "description": "ID of the Channel",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "reason",
       "description": "Reason of the Mute",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "time",
       "description": "Time of the Mute",
       "optional": true,
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "unmutedAt",
       "description": "Unmuting Date",
       "optional": true,
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 194,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "muteEnd",
     "params": [
      {
       "name": "id",
       "description": "ID of the Mute",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "type",
       "description": "Type of the Mute",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "guildID",
       "description": "ID of the Guild",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "memberID",
       "description": "ID of the Muted Member",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "moderatorID",
       "description": "ID of the Moderator",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "channelID",
       "description": "ID of the Channel",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "reason",
       "description": "Reason of the Mute",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "time",
       "description": "Time of the Mute",
       "optional": true,
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "unmutedAt",
       "description": "Unmuting Date",
       "optional": true,
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 209,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "warnCreate",
     "params": [
      {
       "name": "id",
       "description": "ID of the Warn",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "guildID",
       "description": "ID of the Guild",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "memberID",
       "description": "ID of the Warned Member",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "moderatorID",
       "description": "ID of the Moderator",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "channelID",
       "description": "ID of the Channel",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "reason",
       "description": "Reason of the Mute",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 224,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "warnDelete",
     "params": [
      {
       "name": "id",
       "description": "ID of the Warn",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "guildID",
       "description": "ID of the Guild",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "memberID",
       "description": "ID of the Warned Member",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "moderatorID",
       "description": "ID of the Moderator",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "channelID",
       "description": "ID of the Channel",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "reason",
       "description": "Reason of the Mute",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 236,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "warnKick",
     "params": [
      {
       "name": "guildID",
       "description": "ID of the Guild",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "memberID",
       "description": "ID of the Warned Member",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "moderatorID",
       "description": "ID of the Moderator",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "channelID",
       "description": "ID of the Channel",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "reason",
       "description": "Reason of the Mute",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 248,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "warnMute",
     "params": [
      {
       "name": "guildID",
       "description": "ID of the Guild",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "memberID",
       "description": "ID of the Warned Member",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "moderatorID",
       "description": "ID of the Moderator",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "channelID",
       "description": "ID of the Channel",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "reason",
       "description": "Reason of the Mute",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 259,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "lockdownStart",
     "params": [
      {
       "name": "channel",
       "description": "Text Channel",
       "type": [
        [
         [
          "TextChannel"
         ]
        ]
       ]
      },
      {
       "name": "reason",
       "description": "Lockdown Reason",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 270,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "lockdownEnd",
     "params": [
      {
       "name": "channel",
       "description": "Text Channel",
       "type": [
        [
         [
          "TextChannel"
         ]
        ]
       ]
      },
      {
       "name": "reason",
       "description": "Lockdown Reason",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 278,
      "file": "Moderation.ts",
      "path": "src/classes"
     }
    }
   ],
   "meta": {
    "line": 31,
    "file": "Moderation.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "MuteManager",
   "description": "Class that Handles/Creates/Removes Mutes",
   "extends": [
    [
     [
      "TypedEmitter",
      "<"
     ],
     [
      "Events",
      ">"
     ]
    ]
   ],
   "construct": {
    "name": "MuteManager",
    "params": [
     {
      "name": "client",
      "description": "Discord.JS Client",
      "type": [
       [
        [
         "Client"
        ]
       ]
      ]
     },
     {
      "name": "options",
      "description": "Module Options",
      "type": [
       [
        [
         "Options"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "client",
     "description": "Discord Client",
     "type": [
      [
       [
        "Client"
       ]
      ]
     ],
     "meta": {
      "line": 46,
      "file": "MuteManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "options",
     "description": "Module Options",
     "type": [
      [
       [
        "Options"
       ]
      ]
     ],
     "meta": {
      "line": 52,
      "file": "MuteManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "logger",
     "description": "Module Logger",
     "type": [
      [
       [
        "Logger"
       ]
      ]
     ],
     "meta": {
      "line": 58,
      "file": "MuteManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "utils",
     "description": "Module Utils",
     "type": [
      [
       [
        "Utils"
       ]
      ]
     ],
     "meta": {
      "line": 64,
      "file": "MuteManager.ts",
      "path": "src/classes"
     }
    }
   ],
   "methods": [
    {
     "name": "setRole",
     "description": "This method sets Mute Role.",
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      },
      {
       "name": "role",
       "description": "Discord Role",
       "type": [
        [
         [
          "Role"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 71,
      "file": "MuteManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "getRole",
     "description": "This method returns Guild's Mute Role.",
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "null",
        "|"
       ],
       [
        "Role",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 91,
      "file": "MuteManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "getMute",
     "description": "Method that finds Member's Mute in Database",
     "params": [
      {
       "name": "member",
       "description": "Discord Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "null",
        "|"
       ],
       [
        "MutesData",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 113,
      "file": "MuteManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "create",
     "description": "This is method that mutes member.",
     "emits": [
      "Moderation#event:muteMember"
     ],
     "params": [
      {
       "name": "type",
       "description": "Mute Type",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "message",
       "description": "Message or Interaction",
       "type": [
        [
         [
          "Message"
         ]
        ],
        [
         [
          "Interaction"
         ]
        ]
       ]
      },
      {
       "name": "member",
       "description": "Discord Guild Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      },
      {
       "name": "reason",
       "description": "Reason of the Mute",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "time",
       "description": "Time of Temp Mute",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "ReturnObject",
        "|"
       ],
       [
        "MutesData",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 135,
      "file": "MuteManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "delete",
     "description": "Method that removes Mute from Member",
     "emits": [
      "Moderation#event:unmuteMember"
     ],
     "params": [
      {
       "name": "member",
       "description": "Discord Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "ReturnObject",
        "|"
       ],
       [
        "MutesData",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 234,
      "file": "MuteManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "handleUtilsMute",
     "description": "Private method that will handle Mute",
     "emits": [
      "Moderation#event:muteMember"
     ],
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      },
      {
       "name": "member",
       "description": "Guild Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      },
      {
       "name": "time",
       "description": "Time of the Mute",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "muteData",
       "description": "Mute Data",
       "type": [
        [
         [
          "MutesData"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "ReturnObject",
        "|"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 290,
      "file": "MuteManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "handleMute",
     "description": "Private method that will handle Mute",
     "emits": [
      "Moderation#event:unmuteMember"
     ],
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      },
      {
       "name": "member",
       "description": "Guild Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      },
      {
       "name": "time",
       "description": "Time of the Mute",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "muteData",
       "description": "Mute Data",
       "type": [
        [
         [
          "MutesData"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "ReturnObject",
        "|"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 345,
      "file": "MuteManager.ts",
      "path": "src/classes"
     }
    }
   ],
   "meta": {
    "line": 28,
    "file": "MuteManager.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "SystemsManager",
   "description": "Class that controls Guild Systems",
   "construct": {
    "name": "SystemsManager",
    "params": [
     {
      "name": "client",
      "description": "Discord.JS Client",
      "type": [
       [
        [
         "Client"
        ]
       ]
      ]
     },
     {
      "name": "options",
      "description": "Module Options",
      "type": [
       [
        [
         "Options"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "client",
     "description": "Discord Client",
     "type": [
      [
       [
        "Client"
       ]
      ]
     ],
     "meta": {
      "line": 34,
      "file": "SystemsManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "options",
     "description": "Module Options",
     "type": [
      [
       [
        "Options"
       ]
      ]
     ],
     "meta": {
      "line": 40,
      "file": "SystemsManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "utils",
     "description": "Module Utils",
     "type": [
      [
       [
        "Utils"
       ]
      ]
     ],
     "meta": {
      "line": 46,
      "file": "SystemsManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "logger",
     "description": "Module Logger",
     "type": [
      [
       [
        "Logger"
       ]
      ]
     ],
     "meta": {
      "line": 52,
      "file": "SystemsManager.ts",
      "path": "src/classes"
     }
    }
   ],
   "methods": [
    {
     "name": "enable",
     "description": "Method that Enables System",
     "params": [
      {
       "name": "guild",
       "description": "Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      },
      {
       "name": "system",
       "description": "System to enable",
       "type": [
        [
         [
          "AvaliableSystems"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "ReturnObject",
        "|"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 59,
      "file": "SystemsManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "disable",
     "description": "Method that Disables System",
     "params": [
      {
       "name": "guild",
       "description": "Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      },
      {
       "name": "system",
       "description": "System to enable",
       "type": [
        [
         [
          "AvaliableSystems"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "ReturnObject",
        "|"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 87,
      "file": "SystemsManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "status",
     "description": "Method that shows Status of Guild System",
     "params": [
      {
       "name": "guild",
       "description": "Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      },
      {
       "name": "system",
       "description": "System Name",
       "type": [
        [
         [
          "AvaliableSystems"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 115,
      "file": "SystemsManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "all",
     "description": "Method that Shows all the Guild Systems",
     "params": [
      {
       "name": "guild",
       "description": "Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "ModuleSystems",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 131,
      "file": "SystemsManager.ts",
      "path": "src/classes"
     }
    }
   ],
   "meta": {
    "line": 19,
    "file": "SystemsManager.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "Utils",
   "description": "Class that including some methods.",
   "extends": [
    [
     [
      "TypedEmitter",
      "<"
     ],
     [
      "Events",
      ">"
     ]
    ]
   ],
   "construct": {
    "name": "Utils",
    "params": [
     {
      "name": "client",
      "description": "Discord.JS Client",
      "type": [
       [
        [
         "Client"
        ]
       ]
      ]
     },
     {
      "name": "options",
      "description": "Module Options",
      "type": [
       [
        [
         "Options"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "client",
     "description": "Discord Client",
     "type": [
      [
       [
        "Client"
       ]
      ]
     ],
     "meta": {
      "line": 33,
      "file": "Utils.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "options",
     "description": "Module Options",
     "type": [
      [
       [
        "Options"
       ]
      ]
     ],
     "meta": {
      "line": 39,
      "file": "Utils.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "database",
     "description": "Database",
     "type": [
      [
       [
        "DBManager"
       ]
      ]
     ],
     "meta": {
      "line": 45,
      "file": "Utils.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "logger",
     "description": "Module Logger",
     "type": [
      [
       [
        "Logger"
       ]
      ]
     ],
     "meta": {
      "line": 51,
      "file": "Utils.ts",
      "path": "src/classes"
     }
    }
   ],
   "methods": [
    {
     "name": "getGuild",
     "description": "Method that will return Guild Data",
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "GuilData",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 58,
      "file": "Utils.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "createGuild",
     "description": "Method that created Guild Data",
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 79,
      "file": "Utils.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "checkData",
     "description": "Method that checking Guild's Database to match last version",
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 116,
      "file": "Utils.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "setData",
     "description": "Method that changes data in Storage",
     "params": [
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      },
      {
       "name": "newData",
       "description": "New Guild Data",
       "type": [
        [
         [
          "GuildData"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 154,
      "file": "Utils.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "checkMutes",
     "description": "Method that checks mutes when client is ready",
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 170,
      "file": "Utils.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "wait",
     "description": "Method that create Timeout with Promise",
     "params": [
      {
       "name": "ms",
       "description": "Time in milliseconds",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "unknown",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 246,
      "file": "Utils.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "checkImmunity",
     "description": "Method that checks User Immunity.",
     "params": [
      {
       "name": "target",
       "description": "Discord Member or Invite",
       "type": [
        [
         [
          "GuildMember"
         ]
        ],
        [
         [
          "Invite"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 256,
      "file": "Utils.ts",
      "path": "src/classes"
     }
    }
   ],
   "meta": {
    "line": 15,
    "file": "Utils.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "WarnManager",
   "description": "Class that Handles/Creates/Removes Warns",
   "extends": [
    [
     [
      "TypedEmitter",
      "<"
     ],
     [
      "Events",
      ">"
     ]
    ]
   ],
   "construct": {
    "name": "WarnManager",
    "params": [
     {
      "name": "client",
      "description": "Discord.JS Client",
      "type": [
       [
        [
         "Client"
        ]
       ]
      ]
     },
     {
      "name": "options",
      "description": "Module Options",
      "type": [
       [
        [
         "Options"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "client",
     "description": "Discord Client",
     "type": [
      [
       [
        "Client"
       ]
      ]
     ],
     "meta": {
      "line": 35,
      "file": "WarnManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "options",
     "description": "Module Options",
     "type": [
      [
       [
        "Options"
       ]
      ]
     ],
     "meta": {
      "line": 41,
      "file": "WarnManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "mutes",
     "description": "Mute Manager",
     "type": [
      [
       [
        "MuteManager"
       ]
      ]
     ],
     "meta": {
      "line": 47,
      "file": "WarnManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "utils",
     "description": "Module Utils",
     "type": [
      [
       [
        "Utils"
       ]
      ]
     ],
     "meta": {
      "line": 53,
      "file": "WarnManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "logger",
     "description": "Module Logger",
     "type": [
      [
       [
        "Logger"
       ]
      ]
     ],
     "meta": {
      "line": 59,
      "file": "WarnManager.ts",
      "path": "src/classes"
     }
    }
   ],
   "methods": [
    {
     "name": "getWarn",
     "description": "Get last Member Warn",
     "params": [
      {
       "name": "member",
       "description": "Discord Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "WarnsData",
        "|"
       ],
       [
        "null",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 66,
      "file": "WarnManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "create",
     "description": "Method that creates Warn.",
     "emits": [
      "Moderation#event:warnAdd",
      "Moderation#event:warnKick"
     ],
     "params": [
      {
       "name": "message",
       "description": "Message or Interaction",
       "type": [
        [
         [
          "Message"
         ]
        ],
        [
         [
          "Interaction"
         ]
        ]
       ]
      },
      {
       "name": "member",
       "description": "Discord Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      },
      {
       "name": "reason",
       "description": "Warn Reason",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "WarnsData",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 91,
      "file": "WarnManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "delete",
     "description": "Method that removes last warn from member",
     "emits": [
      "Moderation#event:warnRemove"
     ],
     "params": [
      {
       "name": "member",
       "description": "Discord Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "WarnsData",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 146,
      "file": "WarnManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "all",
     "description": "Method that returns all member warns",
     "params": [
      {
       "name": "member",
       "description": "Discord Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "Array",
        "<"
       ],
       [
        "WarnsData",
        ">|"
       ],
       [
        "null",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 186,
      "file": "WarnManager.ts",
      "path": "src/classes"
     }
    },
    {
     "name": "_handle",
     "description": "Method that handles Member Warns",
     "params": [
      {
       "name": "message",
       "description": "Message or Interaction",
       "type": [
        [
         [
          "Message"
         ]
        ],
        [
         [
          "Interaction"
         ]
        ]
       ]
      },
      {
       "name": "member",
       "description": "Discord Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      },
      {
       "name": "data",
       "description": "Guild Data",
       "type": [
        [
         [
          "GuildData"
         ]
        ]
       ]
      },
      {
       "name": "warnData",
       "description": "Warn Data",
       "type": [
        [
         [
          "WarnsData"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "boolean",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 208,
      "file": "WarnManager.ts",
      "path": "src/classes"
     }
    }
   ],
   "meta": {
    "line": 17,
    "file": "WarnManager.ts",
    "path": "src/classes"
   }
  }
 ],
 "interfaces": [],
 "typedefs": [
  {
   "name": "Options",
   "description": "Module Options",
   "type": [
    [
     [
      "Object"
     ]
    ]
   ],
   "props": [
    {
     "name": "dbPath",
     "description": "Storage Path",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "locale",
     "description": "Date Locale (default 'en-US')",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "defaultSystems",
     "description": "Default Systems Values",
     "optional": true,
     "type": [
      [
       [
        "ModuleSystems"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 286,
    "file": "Moderation.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "ModuleSystems",
   "description": "Module Options",
   "type": [
    [
     [
      "Object"
     ]
    ]
   ],
   "props": [
    {
     "name": "autoRole",
     "description": "Auto Role System",
     "optional": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "antiSpam",
     "description": "Anti Spam System",
     "optional": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "antiInvite",
     "description": "Anti Invite System",
     "optional": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "antiJoin",
     "description": "Anti Join System",
     "optional": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "antiLink",
     "description": "Anti Link System",
     "optional": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "blacklist",
     "description": "Blacklist System",
     "optional": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "ghostPing",
     "description": "Ghost Ping Detecting System",
     "optional": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 294,
    "file": "Moderation.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "MutesData",
   "description": "Mute Data",
   "type": [
    [
     [
      "Object"
     ]
    ]
   ],
   "props": [
    {
     "name": "id",
     "description": "ID of the Mute",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "type",
     "description": "Type of the Mute",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "guildID",
     "description": "Guild ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "memberID",
     "description": "Member ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "moderatorID",
     "description": "Moderator ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "channelID",
     "description": "Channel ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "time",
     "description": "Mute Time",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "unmutedAt",
     "description": "Time when Member will be Unmuted",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 306,
    "file": "Moderation.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "GuildData",
   "description": "Guild Data",
   "type": [
    [
     [
      "Object"
     ]
    ]
   ],
   "props": [
    {
     "name": "guildID",
     "description": "Guild ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "muteRole",
     "description": "Mute Role ID",
     "type": [
      [
       [
        "null"
       ]
      ],
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "autoRole",
     "description": "Auto Role ID",
     "type": [
      [
       [
        "null"
       ]
      ],
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "warns",
     "description": "Guild Warns",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "WarnsData",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "mutes",
     "description": "Guild Mutes",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "MutesData",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "ImmunityUsersData",
     "description": "Users with Immunity",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "ImmunityUsersData",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "lockdowns",
     "description": "Guild Lockdowns",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "LockdownsData",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "systems",
     "description": "Guild Systems",
     "type": [
      [
       [
        "ModuleSystems"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 319,
    "file": "Moderation.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "WarnsData",
   "description": "Warn Data",
   "type": [
    [
     [
      "Object"
     ]
    ]
   ],
   "props": [
    {
     "name": "id",
     "description": "ID of the Warn",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "guildID",
     "description": "Guild ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "memberID",
     "description": "Member ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "moderatorID",
     "description": "Moderator ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "channelID",
     "description": "Channel ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "warns",
     "description": "Warns Length",
     "type": [
      [
       [
        "number"
       ]
      ],
      [
       [
        "null"
       ]
      ]
     ]
    },
    {
     "name": "reason",
     "description": "Warn Reason",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 332,
    "file": "Moderation.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "LockdownsData",
   "description": "Lockdown Data",
   "type": [
    [
     [
      "Object"
     ]
    ]
   ],
   "props": [
    {
     "name": "id",
     "description": "ID of Lockdown",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "channelID",
     "description": "Channel ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "reason",
     "description": "Lockdown Reason",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "date",
     "description": "Lockdown Date",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 344,
    "file": "Moderation.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "ImmunityUsersData",
   "description": "Immunity Users Data",
   "type": [
    [
     [
      "Object"
     ]
    ]
   ],
   "props": [
    {
     "name": "status",
     "description": "Status of Immunity",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "memberID",
     "description": "Member ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 353,
    "file": "Moderation.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "userMap",
   "description": "Users Map",
   "type": [
    [
     [
      "Object"
     ]
    ]
   ],
   "props": [
    {
     "name": "msgCount",
     "description": "Count of Sent User Messages",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "lastMessage",
     "description": "Last Message by User",
     "type": [
      [
       [
        "Message"
       ]
      ]
     ]
    },
    {
     "name": "timer",
     "description": "Timeout",
     "type": [
      [
       [
        "NodeJS",
        "."
       ],
       [
        "Timeout"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 360,
    "file": "Moderation.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "ReturnObject",
   "description": "Return Object",
   "type": [
    [
     [
      "Object"
     ]
    ]
   ],
   "props": [
    {
     "name": "status",
     "description": "Status",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "message",
     "description": "Error Message",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 368,
    "file": "Moderation.ts",
    "path": "src/classes"
   }
  },
  {
   "name": "AvaliableSystems",
   "description": "* autoRole\n* antiSpam\n* antiInvite\n* antiJoin\n* antiLink\n* ghostPing",
   "type": [
    [
     [
      "string"
     ]
    ]
   ],
   "meta": {
    "line": 375,
    "file": "Moderation.ts",
    "path": "src/classes"
   }
  }
 ],
 "externals": []
}